// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/ui/ui.proto

package ui

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UIServiceClient is the client API for UIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UIServiceClient interface {
	DisplayRecommendation(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type uIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUIServiceClient(cc grpc.ClientConnInterface) UIServiceClient {
	return &uIServiceClient{cc}
}

func (c *uIServiceClient) DisplayRecommendation(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, "/ui.UIService/DisplayRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIServiceServer is the server API for UIService service.
// All implementations must embed UnimplementedUIServiceServer
// for forward compatibility
type UIServiceServer interface {
	DisplayRecommendation(context.Context, *RecommendationRequest) (*RecommendationResponse, error)
	mustEmbedUnimplementedUIServiceServer()
}

// UnimplementedUIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUIServiceServer struct {
}

func (UnimplementedUIServiceServer) DisplayRecommendation(context.Context, *RecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayRecommendation not implemented")
}
func (UnimplementedUIServiceServer) mustEmbedUnimplementedUIServiceServer() {}

// UnsafeUIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UIServiceServer will
// result in compilation errors.
type UnsafeUIServiceServer interface {
	mustEmbedUnimplementedUIServiceServer()
}

func RegisterUIServiceServer(s grpc.ServiceRegistrar, srv UIServiceServer) {
	s.RegisterService(&UIService_ServiceDesc, srv)
}

func _UIService_DisplayRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).DisplayRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ui.UIService/DisplayRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).DisplayRecommendation(ctx, req.(*RecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UIService_ServiceDesc is the grpc.ServiceDesc for UIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ui.UIService",
	HandlerType: (*UIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisplayRecommendation",
			Handler:    _UIService_DisplayRecommendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ui/ui.proto",
}
